{
  "name": "gulp-svg-symbols",
  "version": "0.3.1",
  "description": "Convert SVG files to symbols with gulp",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Hiswe/gulp-svg-symbols.git"
  },
  "keywords": [
    "gulpplugin",
    "svg",
    "symbols"
  ],
  "author": {
    "name": "Yannick Aïvayan",
    "email": "yannick.aivayan@hiswe.net",
    "url": "http://hiswe.net"
  },
  "license": "WTFPL",
  "bugs": {
    "url": "https://github.com/Hiswe/gulp-svg-symbols/issues"
  },
  "homepage": "https://github.com/Hiswe/gulp-svg-symbols",
  "dependencies": {
    "consolidate": "^0.10.0",
    "lodash": "^2.4.1",
    "through2": "^0.6.1",
    "svgo": "^0.4.5",
    "gulp-util": "^3.0.1",
    "bluebird": "^2.3.2",
    "mathjs": "^1.0.0"
  },
  "devDependencies": {
    "gulp": "^3.8.5",
    "gulp-jasmine": "^1.0.0",
    "event-stream": "^3.1.7",
    "gulp-jshint": "^1.8.4",
    "jshint-stylish": "^0.4.0"
  },
  "readme": "# gulp-svg-symbols\n\n[![NPM version](https://badge.fury.io/js/gulp-svg-symbols.svg)](http://badge.fury.io/js/gulp-svg-symbols) [![Build Status](https://travis-ci.org/Hiswe/gulp-svg-symbols.svg?branch=master)](https://travis-ci.org/Hiswe/gulp-svg-symbols)\n\n*gulp-svg-symbols* is a minimal plugin for [gulp](http://gulpjs.com).  \nIt converts a bunch of svg files to a single svg file containing each one as a symbol.  \nSee [css-trick](http://css-tricks.com/svg-symbol-good-choice-icons/) for more details.\n\nThe plugin produce 2 files:\n\n- *svg-symbols.svg* containing all SVG symbols\n- *svg-symbols.css* containing all classes with the right svg sizes\n\n## Install\n\n```\nnpm install --save-dev gulp-svg-symbols\n```\n\n## Example\n\nin your gulpfile.js\n\n```js\nvar gulp       = require('gulp');\nvar svgSymbols = require('gulp-svg-symbols');\n\ngulp.task('sprites', function () {\n  return gulp.src('assets/svg/*.svg')\n    .pipe(svgSymbols())\n    .pipe(gulp.dest('assets'));\n});\n```\n\nin your HTML, you first have to [reference the SVG](http://css-tricks.com/svg-sprites-use-better-icon-fonts/)  \nthen:\n\n```html\n<svg role=\"img\" class=\"github\">\n  <use xlink:href=\"#github\"></use>\n</svg>\n```\n\n- **class** is the one generated in the CSS file\n- **xlink:href** is the symbol id in the SVG file\n\n## Demo page\n\nYou can generate a simple demo page with `svgSymbols.demoPage()`\n\n```js\nvar gulp = require('gulp');\nvar svgSymbols = require('gulp-svg-symbols');\n\ngulp.task('demo', function () {\n  return gulp.src('assets/svg/*.svg')\n    .pipe(svgSymbols.demoPage())\n    .pipe(gulp.dest('tmp'));\n});\n```\n\n## Options\n\nYou can override the [default options](https://github.com/Hiswe/gulp-svg-symbols/blob/master/lib/default-config.js) by passing an object as an argument to `svgSymbols()`\n\n### id & className\n\ntext templates for generating icon class & symbols id  \n`%f` is the file name placeholder.\n\n### fontSize\n\nthis option let you define a base font.  \nIf it's superior to 0, then the sizes in your CSS file will be in **em**.\n\n### title\n\nSpecify whether or not you want the `title` tag in your SVG symbols.  \nIt should be better for *accessibility*.  \nIt take a text template (like for [id/classname](https://github.com/Hiswe/gulp-svg-symbols#id--classname)) or `false` if you want to remove it\n\n```js\ntitle: false\n```\n\n### css generation\n\nNot really an option but you can deactivate CSS output by removing the CSS template from the template array.  \nSee [templates option](https://github.com/Hiswe/gulp-svg-symbols#templates) for more details.\n\n```js\ntemplates: ['default-svg']\n```\n\n### templates\n\nSpecify your own templates by providing an absolute path:\n\n```js\ntemplates: [\n  path.join(__dirname, 'path/to/my/template.stylus'),\n  path.join(__dirname, 'path/to/another/template.html'),\n  // You can still access to default templates by providing:\n  'default-svg',\n  'default-css',\n  'default-demo'\n]\n```\n\n- template engine is [lodash](http://lodash.com/docs#template).\n- all svg files info are stored in the `icons` array and passed to every templates.\n- the output files will have the same name & extension as your files.\n\n### transformData\n\nWith the ability to provide custom templates, you also have the ability to configure custom datas.\n\n```js\ntransformData: function(svg, defaultData, options) {\n  /******\n  svg is the object containing :\n    content (svg markup)\n    width   (in numeric — no units)\n    height  (in numeric — no units)\n    viewBox (as a string)\n    name    (svg filename without extension)\n\n  defaultData are the ones needed by default templates\n  see /lib/get-default-data.js\n\n  options are the one you have set in your gulpfile,\n    minus templates & transformData\n  *******/\n\n  return {\n    // Return every datas you need\n    id:         defaultData.id,\n    className:  defaultData.className,\n    width:      svg.width + 'em',\n    height:     svg.height + 'em'\n  };\n}\n\n```\n\nin your templates, svg original datas are accessible in `icon.svg`.  \nOf course default templates need `defaultData`.\n\n### other observations\n\n- If you want to change the file name use [gulp-rename](https://www.npmjs.org/package/gulp-rename)  \n- If you want to change the generated files name, again use [gulp-rename](https://www.npmjs.org/package/gulp-rename)\n- If you want different destination for the files, use [gulp-if](https://www.npmjs.org/package/gulp-if)\n- Unlike [gulp-svg-sprites](https://www.npmjs.org/package/gulp-svg-sprites) there is no way to add padding to svg files.\n\n### migrating from v0.1.*\n\n- `svgId` is replaced by `id`.\n- `accessibility` is replaced by `title`.\n- `css: false` is still working but is deprecated. It'll be removed in the v0.4\n\n### Almost all put together:\n\n```js\nvar path        = require('path');\nvar gulp        = require('gulp');\nvar gulpif      = require('gulp-if');\nvar rename      = require('gulp-rename');\nvar svgSymbols  = require('gulp-svg-symbols');\n\nvar customCSSTemplate = path.join(__dirname, './icons.styl');\n\ngulp.task('sprites', function () {\n  return gulp.src('assets/svg/*.svg')\n  .pipe(rename(renameFunction))\n  .pipe(svgSymbols({\n    svgId:      'icon-%f',\n    className:  '.icon-%f',\n    title:      false,\n    fontSize:   16,\n    templates: ['default-svg', 'default-demo', 'customCSSTemplate']\n  }))\n  .pipe(rename(outputFilesRenameFunction))\n  .pipe(gulpif( /[.]svg$/, gulp.dest('views/svg')))\n  .pipe(gulpif( /[.]styl$/, gulp.dest('front/css')))\n  .pipe(gulpif( /[.]html$/, gulp.dest('tmp')));\n});\n```\n\n`dest` management is left to gulp as you may want to pipe more plugins after svgSymbols use.\n\n## Untested features\n\n### SVGO\n\nThis plugin use [SVGO](https://github.com/svg/svgo) before concatenating the files.  \nOptions to SVGO could be passed by using svgoConfig option:\n\n```js\n.pipe(svgSymbols({\n  svgoConfig: {\n    // pass here any options to svgo\n  }\n}))\n```\n\n## All credits goes to\n\n- [Chris Coyier](http://css-tricks.com/) for the [trick](http://css-tricks.com/svg-symbol-good-choice-icons/)\n- [Shaky Shane](https://www.npmjs.org/~shakyshane) for the [gulp-svg-sprites](https://www.npmjs.org/package/gulp-svg-sprites) plugin\n",
  "readmeFilename": "README.md",
  "_id": "gulp-svg-symbols@0.3.1",
  "_from": "gulp-svg-symbols@"
}
